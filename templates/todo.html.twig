{% extends "base.html.twig" %}

{% set pageName = "Todo" %}

{% block title %}{{pageName}}{% endblock %}

{% block body %}
<article>

    <section>
        <h2 id="kmom01">Kmom01</h2>
        <p>
            <ul>


    <li><del>Gör en installation av Symfony och placera den i me/report. Den publika webbkatalogen skall ligga som me/report/public.</li>

    <li><del>Skapa följande webbsidor, använd controller, templatefiler och en templatemotor, förslagsvis Twig.</del></li>
    <ul>
        <li><del>Skapa en route / som ger en presentation av dig själv inklusive en bild. Det är okey att vara anonym och hitta på en figur att presentera.</li>
        <li><del>Skapa en route /about som berättar om kursen mvc och dess syfte. Länka till kursens Git-repo. Lägg till en representativ bild. Skapa ytterligare en länk som leder till ditt egna GitHub-repo. Sidan skall ha två kolumner.</li>
        <li><del>Skapa en route /report där du samlar dina redovisningstexter för kursens kmom.</del></li>
        <li><del>Skapa även så att länken /report#kmom01 leder direkt till kursmomentets redovisningstext.</li>
    </ul>
    <li><del>Skapa en ny route /lucky som visar något dynamiskt värde när man laddar om sidan tillsammans med en/flera bilder. Det kan vara ett “lucky number” men kanske kan du hitta på något annat spännande att visa upp i sidan. Gör sidan lite snygg och stylad, kanske till och med lite “crazy”. Se om du kan vara lite kreativ.</li>

    <li><del>Skapa en route /api/quote där du ger ett JSON svar som innehåller dagens citat. Växla slumpmässigt mellan (minst) tre olika citat som du själv hittat på eller lånat av någon. JSON svaret skall även innehålla dagens datum och en tidsstämpel för när svaret genererades.</li>

    <li><del>Skapa en tilltalande och enhetlig style till webbplatsen. Du kan använda LESS/SASS eller liknande CSS preprocessorer. Du kan använda CSS ramverk. Fundera och gör ett val.</li>

    <li>
        <del>Sidorna skall ha en enhetlig layout och det skall finns</del>
        <ul>
            <li><del>En tydlig header överst på varje sida, med eller utan bild.</del></li>
            <li><del>En navbar som gör att man kan navigera mellan samtliga sidor.</li>
            <li><del>En footer längst ned som visar rimliga detaljer.</li>
        </ul>
    </li>
    <li><del>Skapa ett Git repo av katalogen me/report. Koppla samman repot med GitHub, GitLab eller liknande tjänst.</li>

    <li><del>Committa alla filer och lägg till en tagg 1.0.0. Om du gör uppdateringar så ökar du taggen till 1.0.1, 1.0.2, 1.1.0 eller liknande.</li>

    <li><del>Kör dbwebb test kmom01 för att kolla att du inte har några uppenbara fel.</li>

    <li><del>Pusha upp repot till GitHub, inklusive taggarna.</li>

    <li><del>Gör en dbwebb publishpure report för att kolla att det fungerar på studentservern.</li>

            </ul>   
        </p>
    </section>
        <section>
        <h2 id="kmom02">Kmom02</h2>
        <pre>
        Skapa klasser och använd dem i webbsidor

Börja med att utveckla dina klasser och testa dem i webbsidor enligt följande.

    Skapa en kontroller i Symfony där du kan skapa webbsidor för denna delen av uppgiften.

    Gör en förstasida card som länkar till samtliga undersidor för denna uppgiften. Detta är din “landningssida” för denna uppgiften. Placera länken till sidan i din navbar så den är lätt att nå.

    Skapa klasser för att hantera kort (card) och kortlek (deck). Skapa en sida card/deck som visar samtliga kort i kortleken sorterade per färg och värde. Ess kan vara antingen 1 eller 14 beroende av vilket kortspel man spelar.

    Skapa en sida card/deck/shuffle som visar samtliga kort i kortleken när den har blandats.

    Skapa en sida card/deck/draw som drar ett kort från kortleken och visar upp det. Visa även antalet kort som är kvar i kortleken.

    Skapa en sida card/deck/draw/:number som drar :number kort från kortleken och visar upp dem. Visa även antalet kort som är kvar i kortleken.

    Kortleken skall sparas i sessionen så om man anropar sidorna draw och draw/:number så skall hela tiden antalet kort från korleken minskas tills kortleken är slut. När man gör card/deck/shuffle så kan kortleken återställas.

    Skapa en sida card/deck/deal/:players/:cards som delar ut ett antal :cards från kortleken till ett antal :players och visar upp de korten som respektive spelare har fått. Visa även antalet kort som är kvar i kortleken. Här kan det vara bra att skapa klasser för player och cardHand eller liknande.

    Skapa en sida card/deck2 som är en kortlek inklusive 2 jokrar. Visa kortleken på samma sätt som sidan card/deck. Här kan det troligen vara lämpligt med någon form av arv när du bygger koden. Försök återanvända Deck och bygg förslagsvis DeckWith2Jokers extends Deck.

Optionellt krav.

    Fundera på om du kan använda konstruktionen “interface” för att bygga din kod förberedd för återanvändning. Tänk att din kod jobbar mot ett interface DeckInterface istället för en hård implementation av Deck alternativt DeckWith2Jokers. Se om du kan uppdatera din kod och dina sidor så applikationen blir mer flexibel för implementationen av själva kortleken. Spelaren, korthanden, och utdelningen av korten samt blandningen bör ju inte behöva bry sig om vilka kort som ligger i kortleken.

Bygg JSON API

Börja med att utveckla dina klasser och testa dem i webbsidor enligt följande.

    Skapa en kontroller i Symfony där du kan skapa ett JSON API för denna delen av uppgiften.

    I din landningssida för card/ fortsätter du att länka till alla JSON routes som finns i denna delen av uppgiften.

    Skapa en route GET card/api/deck som returnerar en JSON struktur med hela kortleken sorterad per färg och värde.

Följande 3 krav är optionella. Gör dem om du känner att du har tid. Det är bra övning och träning.

    Skapa en route POST card/api/deck/shuffle som blandar kortleken och därefter returnerar en JSON struktur med kortleken.

    Skapa route POST card/api/deck/draw och card/api/deck/draw/:number som drar 1 eller :number kort från kortleken och visar upp dem i en JSON struktur samt antalet kort som är kvar i kortleken. Kortleken sparas i sessionen så om man anropar dem flera gånger så minskas antalet kort i kortleken.

    Skapa en sida card/api/deck/deal/:players/:cards som delar ut ett antal :cards från kortleken till ett antal :players och visar upp de korten som respektive spelare har fått i en JSON struktur. Visa även antalet kort som är kvar i kortleken.

Problemlösning

Denna delen av uppgiften kan med fördel göras i nästa kmom. Du kan alltså se den som optionell i detta kmom.

Välj om du vill göra den i detta kmom eller avvakta och gör den i nästa kmom.

Rekommendationen är att avvakta och göra denna delen i kmom03.

Du skall försöka problemlösa ett spel med flödesschema och pseudokod.

    Välj ett kortspel som du vill problemlösa (och implementera i nästa kmom). Är du osäker så väljer du kortspelet 21 eller kortspelet Black Jack där en spelare kan spela mot datorn som är bank. Du kan även välja olika spelvarianter på dessa kortspel eller ett annat kortspel eller en patiens (se exempel på olika kort patienser).

    Samla all din dokumentation i en webbsida under routen game/card och länka till dokumentationssidan från din landningssida card/.

    Inled med en kort beskrivning av ditt kortspel och hur du valt att det skall fungera.

    Skapa ett flödesschema som representerar hur du tänker lösa grunderna i spelet. Resultatet kan du placera som en bild i webbsidan. Det behöver inte vara en komplett lösning, en dellösning räcker bra.

    Skapa psuedokod som visar hur du tänker lösa delar av spelet. Du kan spara resultatet som text eller bild men visa upp det i webbsidan. Det behöver inte vara en komplett lösning, en dellösning räcker bra.

    Fundera igenom vilka klasser du behöver för att implementera spelet. Beskriv klasserna i text med klassens namn och en mening som beskriver vad klassens syfte är. Håll det kort och enkelt.

    Om du vill kan du komplettera med att rita ett UML klass diagram (optionellt).

Publicera

    Committa alla filer och lägg till en tagg 2.0.0. Om du gör uppdateringar så ökar du taggen till 2.0.1, 2.0.2, 2.1.0 eller liknande.

    Kör dbwebb test kmom02 för att kolla att du inte har några fel.

    Pusha upp repot till GitHub, inklusive taggarna.

    Gör en dbwebb publishpure report och kontrollera att att det fungerar på studentservern.

</pre>

    </section>
        <section>
        <h2 id="kmom03">Kmom03</h2>

    </section>
        <section>
        <h2 id="kmom04">Kmom04</h2>

    </section>
        <section>
        <h2 id="kmom05">Kmom05</h2>

        
    </section>
        <section>
        <h2 id="kmom06">Kmom06</h2>
    </section>
</article>
{% endblock %}